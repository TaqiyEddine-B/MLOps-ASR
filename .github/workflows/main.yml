name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install virtualenv
      run: pip install virtualenv
    - name: Cache virtual environment
      uses: actions/cache@v3
      with:
        path: .venv
        key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements.txt') }}
    - name: Setup and Install dependencies
      run: |
        make setup
        make install

  lint:
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff
    - name: Run linter
      run: make lint

  test:
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        sudo apt-get install -y ffmpeg
        pip install -r requirements.txt
    - name: Run tests
      run:
        python -m pytest -v -s step1_basic_api/tests/

  deploy:
    needs: [lint, test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      # Step 1: Checkout the latest code from the repo
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up AWS CLI with your credentials (you need to add these as secrets in your GitHub repo settings)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Login to AWS ECR Public using AWS CLI
      - name: Authenticate to AWS ECR Public
        run: |
          aws ecr-public get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      # Step 4: Build the Docker image
      - name: Build Docker image
        run: docker build -t mlops-asr-api -f step1_basic_api/Dockerfile .

      # Step 5: Tag the Docker image
      - name: Tag Docker image
        run: docker tag mlops-asr-api:latest ${{ secrets.ECR_REGISTRY }}/mlops-asr-api:latest


      # Step 6: Push the Docker image to ECR
      - name: Push Docker image to AWS ECR Public
        run: docker push ${{ secrets.ECR_REGISTRY }}/mlops-asr-api:latest
